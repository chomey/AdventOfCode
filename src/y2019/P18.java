package y2019;

import lombok.Data;
import lombok.EqualsAndHashCode;

import java.util.*;

public class P18 {
	public static void main(String[] args) {
		String inputStr = "#################################################################################\n" +
				                  "#.........#.............#.......#.....#.#.....................#...#..c#.........#\n" +
				                  "#.###.#####.#######.#####.###.#.#.###.#.#.#######.###########.#.#.###.#.#####.#.#\n" +
				                  "#.#.#.#e..#...#.#...#.....#.#.#...#.....#..b#...#.#.........#...#.....#.#.T..r#.#\n" +
				                  "#.#.#.#.#.###.#.#.#.#.#####.#.#############.#.###.#.#####.#.#.#######.#.#.#######\n" +
				                  "#.#...#.#...#...#.#.#.#.....#.........K.#.#.#...#.#.#...#.#...#...#...#.#.......#\n" +
				                  "#.###.#.###.#.###.#.#.#.###.###########.#.#.###.#.###.#.#.#####.#.#.###.#######.#\n" +
				                  "#...#.#...#...#...#.#...#.#...#.....#...#.#.#...#.....#.#.#.....#.#...#.#.#.....#\n" +
				                  "###.#.###.#####.#########.###.#.###.#.#.#.#.#.#.#######.#.#O#####.#####.#.#.###.#\n" +
				                  "#...#.#.#...#.#.............#.#.#...#.#.#...#x#.#.....#.#.#...#z#.....#.#.#.#...#\n" +
				                  "#.###.#R###.#.#####.#.#######.#.#.###.#.#.###.#.#.###.#.#.###.#.#####.#.#.#.#####\n" +
				                  "#.#...#...#.#.....#.#.#.....#.#.#.#...#.#...#.#...#...#.#.#.......#...#...#.....#\n" +
				                  "#.#.#####.#.###.#.#.#.#.###.#.#.#.#.#######.#.#####L###.#.#.#####.#.#####.#####.#\n" +
				                  "#.#.......#...#.#.#.#.#...#...#.#.#...Y.#.#.#...#.....#.#.#.#...#.#.......#....q#\n" +
				                  "#.###########.#.#.#.#####.#######.#####.#.#.###.#######.###.#.#.#.#########.###.#\n" +
				                  "#...#.......#.#.#.#...#...#..h..#.....#.#.......#.....#...#.#.#.#.#.......#.#...#\n" +
				                  "#.#.#.#####.#.#.#.###.#.###.###.###.###.#######.#.###.###.#.#.#.#.#.#######.#.###\n" +
				                  "#.#.....#...#.#.#...#.#.#...#.....#.#...#...#...#...#...#...#.#.#.#.#.......#.#.#\n" +
				                  "#########.###.#####.#.#.#F#.#####.#.#.###.#.###.###.###.#.###.#.#.#.#.#######.#.#\n" +
				                  "#.........#...#.....#...#.#.#...#...#.#s#.#...#.#...#...#.#...#.#.#.#.#...#...#.#\n" +
				                  "#.#####.###.###.#.#####.#.###.#.###.#.#.#.###.###.###.#####.###.#.#.#.#.###.###.#\n" +
				                  "#..d#...#...#...#.#...#...#...#.#...#.#.#.#.#.....#.#.......#...#...#.#...#.#...#\n" +
				                  "#.#.#####.###.#.###.#######.###.#####.#.#.#.#######.#############.###.#.#.#.###.#\n" +
				                  "#.#.....#...#.#...#.........#.#.......#.#.......#.....#.....#.....#...#.#.#.....#\n" +
				                  "#.#####.###.#####.###########.#########.#######.#.###.###.#.#####.#.#####.#####.#\n" +
				                  "#.#...#...#...#...#.......#...........#.#.....#...#...#...#.....#.#...#.....#...#\n" +
				                  "#.#.###.#.###.#.#.#.#####.###.#######.#.#.###.#####.###.#######.#####.#.#####.###\n" +
				                  "#.#.#...#.#.#.#.#...#.....#...#.......#.#.#.#.....#...#.#.....#.#.....#.........#\n" +
				                  "#.#.#.###.#.#.#.#####.#####.#####.#####.#.#.###.#.###.#.#.#.###.#.#.#######.#####\n" +
				                  "#...#.#.#...#.#...#.#.#...#.....#.#.....#.....#.#...#...#.#.#...#.#j#.....#.#.W.#\n" +
				                  "#####.#.###.#.###.#.#.#.#.#####.#.###.#.#####.#.#########.###.###.###.###.###.#.#\n" +
				                  "#...#.#.....#.#...#.#.#.#.......#.....#.#.#...#.........#.....#.....#...#...#.#.#\n" +
				                  "#.#.#.#####.#.#.###.#.#.###############.#.#.#########.###.#########.#.#####.#.#.#\n" +
				                  "#.#...#...#.#.#w..#...#...#...........#.#.#.#.......#...#...#.....#...#.V.#...#.#\n" +
				                  "#.#####.#.###.###.#.###.#.#.###########.#.#.#####.#.###.###.###.#M#####.#.#####.#\n" +
				                  "#.....#.#...#.....#.#.#.#.#.A.#...#.....#.#.......#...#...#...#.#.......#.......#\n" +
				                  "#####.#.###.#######.#.#.#.#.#.#.#.#.#####.###########.###.###.#.###############.#\n" +
				                  "#.....#.#.#.......#.#...#.#.#...#.#.....#...#.......#.#.#.#...#.....#.#.....#...#\n" +
				                  "#.#####.#.#######.#.#####.#.#####.#####.#.#.#.###.###.#.#.#.#######.#.#.###.#.###\n" +
				                  "#............v..#.........#.....#.........#.....#.......#...........#.....#.....#\n" +
				                  "#######################################.@.#######################################\n" +
				                  "#.#.....G.....#.....#.......#.........#.........#.......#...........#.......#...#\n" +
				                  "#.#.###.#####.#####.#.#####.#.###.###.#.#.#####.#####.#.#######.###.#.###.#.###.#\n" +
				                  "#.#.#.#.....#.......#.#...#...#.#.#.....#.#...#......a#.......#...#.#.#...#.#...#\n" +
				                  "#.#.#.#####.#######.#.#.#.#####.#.#####.#.#.#.###############.###.#.#.#.###.#.#.#\n" +
				                  "#.#..n....#.#.......#.#.#...#...#.....#.#.#.#...#.....#.....#...#.#...#...#.#.#.#\n" +
				                  "#.#######.#.#########.#.###.#.#######.#.#.#.#####.#.###.#.#.###.#########P#.#.###\n" +
				                  "#...#.#...#...#u..#...#.#...#.......#.#.#.#...#...#.....#.#...#.....#...#.#.#...#\n" +
				                  "#.#.#.#.#####.#.#.#.###.###.###.###.#.#.#.###.#.#########.###.#####.#.#U#.#.###.#\n" +
				                  "#.#...#p..#.#...#...#.....#.....#...#.#.#...#.#.#.....#...#...#...#...#.#.#...#.#\n" +
				                  "#.###.###.#.###########.#.###########.#####.#.#.###.#.#.###.###.#.#####.#.###.#.#\n" +
				                  "#...#.#...#...#.......#.#.#..k..#...#...#...#.#.#...#.#.#...#...#...#...#...#.#.#\n" +
				                  "#.#.###.###.#.###.###.###.#.###.#.#.###.#.###.#.#.###C#Z###.#.#####.#.###.#.#.#.#\n" +
				                  "#.#.........#.....#.#.#...#.#...#.#...#.#...#.#.#.#...#...#.#.....#.#...#.#.#.#.#\n" +
				                  "#.#################.#.#.###.#.###.###.#.#.#.#.#.#.#.#####.#.###.###.###.###.#.#.#\n" +
				                  "#m....#...........#.#...#...#...#...#.#.#.#.#.#.#.#.#.....#...#.#...#..g#.N.#...#\n" +
				                  "#.#####.#########.#.###.#.#####.###.#.#.###.#.#.#B#.#.#########.#.###.###.#####.#\n" +
				                  "#.#.....#.....#...#.....#.#...#.#...#...#...#.....#.#.......#...#...#...#.#i..#.#\n" +
				                  "###.#######.###.#########.#.###.#.#######.#########.#######.#.#####.###.#.#.#.#.#\n" +
				                  "#...#.......#...#....y....#...#.#.#.....#.#...S.#...#.....#.......#.#...#.#.#.#.#\n" +
				                  "#.###.#####.#.#.#.#########.#.#.#.#.###.#.#.###.#.###.###.#####.###.#.###.#.#.#.#\n" +
				                  "#...#.#.#...#.#.#.....#...#.#...#.....#.#.....#.#...#.#.....#.#.#...#.....#.#.#.#\n" +
				                  "###.#.#.#.###.#########.#.#.#####.#####.#######.###X#.#######.###.#.#######.###.#\n" +
				                  "#...#.#.#...#...........#.#...#...#.....#...#...#...#.#.......#...#.....#.......#\n" +
				                  "#Q###.#.###.#####.###########.#.###.###.#.#.#.#####.#.#.#######.#########.#######\n" +
				                  "#.....#...#.#...#.........#...#.#...#.#.#.#.#.....#...#...#.....#.......#.......#\n" +
				                  "#######.###.#.###########.#.#####.###.#.#.#.#####.###.###.#####.#D#####.#######.#\n" +
				                  "#.....#...#.#.......#...#...#.....#.....#.#.#...#.#....l#...#...#.#...#.......#.#\n" +
				                  "###.#.###.#.###.###.###.#####.#.#########.#.#.###.#########.#.#.#.###.#######.#.#\n" +
				                  "#...#...#.#.....#...#.......#.#.........#.#.#.#...#...#...#.#.#.#...#.......#...#\n" +
				                  "#.#####.#.#######.###.#######.#########.#.#.#.#.###.#.#.#.#.#.#.###.#.#####.#####\n" +
				                  "#.#..t#.#.....#...#.............#.....#.#.#.#.#.....#...#...#.#.#...#.#...#.....#\n" +
				                  "#.###.#.#.#####.###.###########.#.#.###.#.#.#.###############.#.#.#####.#.#####.#\n" +
				                  "#...#.....#...#.#.....#.......#...#.#...#.#.........#.........#.#.......#.#.....#\n" +
				                  "#E#.#.#####.#.#.#####.#.#####.#####.#.###.###.#######.#####.#############.#.#####\n" +
				                  "#.#.#...#...#.#...#...#.#...#...#...#...#...#.#.....#.#...#.........#.....#.#...#\n" +
				                  "###.#####.###I###.#.###.#.#.###.#####.#.#.#.###.###.#.#.#######.#####.#####.#.#.#\n" +
				                  "#...#...#...#...#.#.#...#.#...#.#...#.#.#.#..f..#.#...#.....#...#.....#...#...#.#\n" +
				                  "#.###.#.###.#.###.###.###.#####.#.#.###.#.#######.#########.#.###.#####.#.#####.#\n" +
				                  "#.J...#.....#.........#...........#.....#.............H....o#...........#.......#\n" +
				                  "#################################################################################";
		Map<Point, Character> map = new TreeMap<>();
		//@ start
		//! end
		//A-{ portals
		String[] lines = inputStr.split("\n");
		int target = 0;
		for (int y = 0; y < lines.length; y++) {
			for (int x = 0; x < lines[y].length(); x++) {
				char value = lines[y].charAt(x);
				if ('a' <= value && value <= 'z') {
					target++;
				}
				map.put(new Point(x, y), value);
			}
		}

		State start = new State(find(map, '@').iterator().next(), new HashSet<>(), 0);
		System.out.println("Found start: " + start);

		Set<State> visited = new HashSet<>();
		visited.add(start);
		ArrayDeque<State> nextSearch = new ArrayDeque<>();
		nextSearch.add(start);
		search(map, nextSearch, visited, target);
	}

	private static void search(Map<Point, Character> map, Deque<State> nextSearch, Set<State> visited, int target) {
		while (nextSearch.size() > 0) {
			State state = nextSearch.pollFirst();
			if (state.collected.size() == target) {
				System.out.println(state.steps);
				return;
			}
			for (Direction d : Direction.values()) {
				Point nextPoint = state.currentLocation.apply(d);
				State newState = new State(nextPoint, new HashSet<>(state.collected), state.steps + 1);
				if (isValidNextMove(map, nextPoint) && !visited.contains(newState)) {
					Character nextCharacter = map.get(nextPoint);
					if (nextCharacter == '.' || nextCharacter == '@' || state.collected.contains((char) (nextCharacter + 32))) {
						nextSearch.add(newState);
						visited.add(newState);
					} else if ('a' <= nextCharacter && nextCharacter <= 'z') {
						newState.collected.add(nextCharacter);
						nextSearch.add(newState);
						visited.add(newState);
					} else {
						continue;
					}
				}
			}
		}
	}

	private static boolean isValidNextMove(Map<Point, Character> map, Point nextPoint) {
		return map.containsKey(nextPoint) && map.get(nextPoint) != '#';
	}

	static Set<Point> find(Map<Point, Character> map, Character c) {
		Set<Point> result = new HashSet<>();
		for (Map.Entry<Point, Character> entry : map.entrySet()) {
			if (entry.getValue() == c) {
				result.add(entry.getKey());
			}
		}
		return result;
	}

	@Data
	static class State {
		final Point currentLocation;
		final Set<Character> collected;
		@EqualsAndHashCode.Exclude final int steps;
	}
}
