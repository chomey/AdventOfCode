package y2019;

import lombok.Data;

import java.util.*;

public class P18b {
	public static void main(String[] args) {
		String inputStr = "#################################################################################\n" +
				                  "#.........#.............#.......#.....#.#.....................#...#..c#.........#\n" +
				                  "#.###.#####.#######.#####.###.#.#.###.#.#.#######.###########.#.#.###.#.#####.#.#\n" +
				                  "#.#.#.#e..#...#.#...#.....#.#.#...#.....#..b#...#.#.........#...#.....#.#.T..r#.#\n" +
				                  "#.#.#.#.#.###.#.#.#.#.#####.#.#############.#.###.#.#####.#.#.#######.#.#.#######\n" +
				                  "#.#...#.#...#...#.#.#.#.....#.........K.#.#.#...#.#.#...#.#...#...#...#.#.......#\n" +
				                  "#.###.#.###.#.###.#.#.#.###.###########.#.#.###.#.###.#.#.#####.#.#.###.#######.#\n" +
				                  "#...#.#...#...#...#.#...#.#...#.....#...#.#.#...#.....#.#.#.....#.#...#.#.#.....#\n" +
				                  "###.#.###.#####.#########.###.#.###.#.#.#.#.#.#.#######.#.#O#####.#####.#.#.###.#\n" +
				                  "#...#.#.#...#.#.............#.#.#...#.#.#...#x#.#.....#.#.#...#z#.....#.#.#.#...#\n" +
				                  "#.###.#R###.#.#####.#.#######.#.#.###.#.#.###.#.#.###.#.#.###.#.#####.#.#.#.#####\n" +
				                  "#.#...#...#.#.....#.#.#.....#.#.#.#...#.#...#.#...#...#.#.#.......#...#...#.....#\n" +
				                  "#.#.#####.#.###.#.#.#.#.###.#.#.#.#.#######.#.#####L###.#.#.#####.#.#####.#####.#\n" +
				                  "#.#.......#...#.#.#.#.#...#...#.#.#...Y.#.#.#...#.....#.#.#.#...#.#.......#....q#\n" +
				                  "#.###########.#.#.#.#####.#######.#####.#.#.###.#######.###.#.#.#.#########.###.#\n" +
				                  "#...#.......#.#.#.#...#...#..h..#.....#.#.......#.....#...#.#.#.#.#.......#.#...#\n" +
				                  "#.#.#.#####.#.#.#.###.#.###.###.###.###.#######.#.###.###.#.#.#.#.#.#######.#.###\n" +
				                  "#.#.....#...#.#.#...#.#.#...#.....#.#...#...#...#...#...#...#.#.#.#.#.......#.#.#\n" +
				                  "#########.###.#####.#.#.#F#.#####.#.#.###.#.###.###.###.#.###.#.#.#.#.#######.#.#\n" +
				                  "#.........#...#.....#...#.#.#...#...#.#s#.#...#.#...#...#.#...#.#.#.#.#...#...#.#\n" +
				                  "#.#####.###.###.#.#####.#.###.#.###.#.#.#.###.###.###.#####.###.#.#.#.#.###.###.#\n" +
				                  "#..d#...#...#...#.#...#...#...#.#...#.#.#.#.#.....#.#.......#...#...#.#...#.#...#\n" +
				                  "#.#.#####.###.#.###.#######.###.#####.#.#.#.#######.#############.###.#.#.#.###.#\n" +
				                  "#.#.....#...#.#...#.........#.#.......#.#.......#.....#.....#.....#...#.#.#.....#\n" +
				                  "#.#####.###.#####.###########.#########.#######.#.###.###.#.#####.#.#####.#####.#\n" +
				                  "#.#...#...#...#...#.......#...........#.#.....#...#...#...#.....#.#...#.....#...#\n" +
				                  "#.#.###.#.###.#.#.#.#####.###.#######.#.#.###.#####.###.#######.#####.#.#####.###\n" +
				                  "#.#.#...#.#.#.#.#...#.....#...#.......#.#.#.#.....#...#.#.....#.#.....#.........#\n" +
				                  "#.#.#.###.#.#.#.#####.#####.#####.#####.#.#.###.#.###.#.#.#.###.#.#.#######.#####\n" +
				                  "#...#.#.#...#.#...#.#.#...#.....#.#.....#.....#.#...#...#.#.#...#.#j#.....#.#.W.#\n" +
				                  "#####.#.###.#.###.#.#.#.#.#####.#.###.#.#####.#.#########.###.###.###.###.###.#.#\n" +
				                  "#...#.#.....#.#...#.#.#.#.......#.....#.#.#...#.........#.....#.....#...#...#.#.#\n" +
				                  "#.#.#.#####.#.#.###.#.#.###############.#.#.#########.###.#########.#.#####.#.#.#\n" +
				                  "#.#...#...#.#.#w..#...#...#...........#.#.#.#.......#...#...#.....#...#.V.#...#.#\n" +
				                  "#.#####.#.###.###.#.###.#.#.###########.#.#.#####.#.###.###.###.#M#####.#.#####.#\n" +
				                  "#.....#.#...#.....#.#.#.#.#.A.#...#.....#.#.......#...#...#...#.#.......#.......#\n" +
				                  "#####.#.###.#######.#.#.#.#.#.#.#.#.#####.###########.###.###.#.###############.#\n" +
				                  "#.....#.#.#.......#.#...#.#.#...#.#.....#...#.......#.#.#.#...#.....#.#.....#...#\n" +
				                  "#.#####.#.#######.#.#####.#.#####.#####.#.#.#.###.###.#.#.#.#######.#.#.###.#.###\n" +
				                  "#............v..#.........#.....#......@#@#.....#.......#...........#.....#.....#\n" +
				                  "#################################################################################\n" +
				                  "#.#.....G.....#.....#.......#.........#@#@......#.......#...........#.......#...#\n" +
				                  "#.#.###.#####.#####.#.#####.#.###.###.#.#.#####.#####.#.#######.###.#.###.#.###.#\n" +
				                  "#.#.#.#.....#.......#.#...#...#.#.#.....#.#...#......a#.......#...#.#.#...#.#...#\n" +
				                  "#.#.#.#####.#######.#.#.#.#####.#.#####.#.#.#.###############.###.#.#.#.###.#.#.#\n" +
				                  "#.#..n....#.#.......#.#.#...#...#.....#.#.#.#...#.....#.....#...#.#...#...#.#.#.#\n" +
				                  "#.#######.#.#########.#.###.#.#######.#.#.#.#####.#.###.#.#.###.#########P#.#.###\n" +
				                  "#...#.#...#...#u..#...#.#...#.......#.#.#.#...#...#.....#.#...#.....#...#.#.#...#\n" +
				                  "#.#.#.#.#####.#.#.#.###.###.###.###.#.#.#.###.#.#########.###.#####.#.#U#.#.###.#\n" +
				                  "#.#...#p..#.#...#...#.....#.....#...#.#.#...#.#.#.....#...#...#...#...#.#.#...#.#\n" +
				                  "#.###.###.#.###########.#.###########.#####.#.#.###.#.#.###.###.#.#####.#.###.#.#\n" +
				                  "#...#.#...#...#.......#.#.#..k..#...#...#...#.#.#...#.#.#...#...#...#...#...#.#.#\n" +
				                  "#.#.###.###.#.###.###.###.#.###.#.#.###.#.###.#.#.###C#Z###.#.#####.#.###.#.#.#.#\n" +
				                  "#.#.........#.....#.#.#...#.#...#.#...#.#...#.#.#.#...#...#.#.....#.#...#.#.#.#.#\n" +
				                  "#.#################.#.#.###.#.###.###.#.#.#.#.#.#.#.#####.#.###.###.###.###.#.#.#\n" +
				                  "#m....#...........#.#...#...#...#...#.#.#.#.#.#.#.#.#.....#...#.#...#..g#.N.#...#\n" +
				                  "#.#####.#########.#.###.#.#####.###.#.#.###.#.#.#B#.#.#########.#.###.###.#####.#\n" +
				                  "#.#.....#.....#...#.....#.#...#.#...#...#...#.....#.#.......#...#...#...#.#i..#.#\n" +
				                  "###.#######.###.#########.#.###.#.#######.#########.#######.#.#####.###.#.#.#.#.#\n" +
				                  "#...#.......#...#....y....#...#.#.#.....#.#...S.#...#.....#.......#.#...#.#.#.#.#\n" +
				                  "#.###.#####.#.#.#.#########.#.#.#.#.###.#.#.###.#.###.###.#####.###.#.###.#.#.#.#\n" +
				                  "#...#.#.#...#.#.#.....#...#.#...#.....#.#.....#.#...#.#.....#.#.#...#.....#.#.#.#\n" +
				                  "###.#.#.#.###.#########.#.#.#####.#####.#######.###X#.#######.###.#.#######.###.#\n" +
				                  "#...#.#.#...#...........#.#...#...#.....#...#...#...#.#.......#...#.....#.......#\n" +
				                  "#Q###.#.###.#####.###########.#.###.###.#.#.#.#####.#.#.#######.#########.#######\n" +
				                  "#.....#...#.#...#.........#...#.#...#.#.#.#.#.....#...#...#.....#.......#.......#\n" +
				                  "#######.###.#.###########.#.#####.###.#.#.#.#####.###.###.#####.#D#####.#######.#\n" +
				                  "#.....#...#.#.......#...#...#.....#.....#.#.#...#.#....l#...#...#.#...#.......#.#\n" +
				                  "###.#.###.#.###.###.###.#####.#.#########.#.#.###.#########.#.#.#.###.#######.#.#\n" +
				                  "#...#...#.#.....#...#.......#.#.........#.#.#.#...#...#...#.#.#.#...#.......#...#\n" +
				                  "#.#####.#.#######.###.#######.#########.#.#.#.#.###.#.#.#.#.#.#.###.#.#####.#####\n" +
				                  "#.#..t#.#.....#...#.............#.....#.#.#.#.#.....#...#...#.#.#...#.#...#.....#\n" +
				                  "#.###.#.#.#####.###.###########.#.#.###.#.#.#.###############.#.#.#####.#.#####.#\n" +
				                  "#...#.....#...#.#.....#.......#...#.#...#.#.........#.........#.#.......#.#.....#\n" +
				                  "#E#.#.#####.#.#.#####.#.#####.#####.#.###.###.#######.#####.#############.#.#####\n" +
				                  "#.#.#...#...#.#...#...#.#...#...#...#...#...#.#.....#.#...#.........#.....#.#...#\n" +
				                  "###.#####.###I###.#.###.#.#.###.#####.#.#.#.###.###.#.#.#######.#####.#####.#.#.#\n" +
				                  "#...#...#...#...#.#.#...#.#...#.#...#.#.#.#..f..#.#...#.....#...#.....#...#...#.#\n" +
				                  "#.###.#.###.#.###.###.###.#####.#.#.###.#.#######.#########.#.###.#####.#.#####.#\n" +
				                  "#.J...#.....#.........#...........#.....#.............H....o#...........#.......#\n" +
				                  "#################################################################################";
		Map<Point, Character> map = new TreeMap<>();
		//@ start
		//! end
		//A-{ portals
		String[] lines = inputStr.split("\n");
		int target = 0;
		for (int y = 0; y < lines.length; y++) {
			for (int x = 0; x < lines[y].length(); x++) {
				char value = lines[y].charAt(x);
				if ('a' <= value && value <= 'z') {
					target++;
				}
				map.put(new Point(x, y), value);
			}
		}

		PartialState start = new PartialState(find(map, '@'), new HashSet<>());
		System.out.println("Found start: " + start);

		Set<PartialState> visited = new HashSet<>();
		visited.add(start);
		ArrayDeque<State> nextSearch = new ArrayDeque<>();
		nextSearch.add(new State(start, 0));
		search(map, nextSearch, visited, target);
	}

	static int maxCollected = 0;
	static long counter = 0;

	private static void search(Map<Point, Character> map, Deque<State> nextSearch, Set<PartialState> visited, int target) {
		while (nextSearch.size() > 0) {
			counter++;
			State state = nextSearch.pollFirst();
			int collected = state.partialState.collected.size();
			if (counter % 100000 == 0) {
				System.out.println("Move: " + counter);
			}
			if (collected > maxCollected) {
				maxCollected = collected;
				System.out.println(String.format("Found %dth on turn %d", maxCollected, counter));
			}
			if (collected == target) {
				System.out.println(state.steps);
				return;
			}
			for (Point currentLocation : state.partialState.currentLocations) {
				for (Direction d : Direction.values()) {
					Point nextPoint = currentLocation.apply(d);
					Set<Point> currentLocations = new HashSet<>(state.partialState.currentLocations);
					currentLocations.remove(currentLocation);
					currentLocations.add(nextPoint);
					PartialState partialState = new PartialState(currentLocations, new HashSet<>(state.partialState.collected));
					if (isValidNextMove(map, nextPoint) && !visited.contains(partialState)) {
						Character nextCharacter = map.get(nextPoint);
						if (nextCharacter == '.' || nextCharacter == '@' || state.partialState.collected.contains((char) (nextCharacter + 32))) {
							nextSearch.add(new State(partialState, state.steps + 1));
							visited.add(partialState);
						} else if ('a' <= nextCharacter && nextCharacter <= 'z') {
							State newState = new State(partialState, state.steps + 1);
							newState.partialState.collected.add(nextCharacter);
							nextSearch.add(newState);
							visited.add(newState.partialState);
						} else {
//						System.out.println(String.format("(%d,%d) with %s => END FOR %c", state.partialState.currentLocation.x, state.partialState.currentLocation.y, state.partialState.collected, nextCharacter));
							continue;
						}
//					System.out.println(String.format("(%d,%d) with %s => (%d, %d) FOR %c", state.partialState.currentLocation.x, state.partialState.currentLocation.y, state.partialState.collected, nextPoint.x, nextPoint.y, nextCharacter));
					}
				}
			}
		}
	}

	private static boolean isValidNextMove(Map<Point, Character> map, Point nextPoint) {
		return map.containsKey(nextPoint) && map.get(nextPoint) != '#';
	}

	static Set<Point> find(Map<Point, Character> map, Character c) {
		Set<Point> result = new HashSet<>();
		for (Map.Entry<Point, Character> entry : map.entrySet()) {
			if (entry.getValue() == c) {
				result.add(entry.getKey());
			}
		}
		return result;
	}

	@Data
	static class State {
		final PartialState partialState;
		final int steps;
	}

	@Data
	static class PartialState {
		final Set<Point> currentLocations;
		final Set<Character> collected;
	}
}
